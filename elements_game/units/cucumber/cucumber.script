require "elements_game.core.globals"

is_shield = true

local sound_list = {"#dead_song","#dead_song1"}
function init(self)
	if CUCUMBER == "hop" then
		sprite.play_flipbook("#sprite_cucumber", hash("cucumber_walk"))
	elseif CUCUMBER == "nik" then
		sprite.play_flipbook("#sprite_cucumber", hash("pickle_walk"))
	elseif CUCUMBER == "vampir" then
		sprite.play_flipbook("#sprite_cucumber", hash("vampir_walk"))
	elseif CUCUMBER == "arni" then
		sprite.play_flipbook("#sprite_cucumber", hash("armor_walk"))
	end
	math.randomseed(os.time())
	msg.post(".", "acquire_input_focus")
	self.dir = vmath.vector3()
	self.correction = vmath.vector3()
	self.regen = 1
	go.set(".", "rotation", vmath.quat(0, 0, 0.1, -0.2))
	local pos = go.get_position()
	go.animate("#sprite_cucumber", "scale", go.PLAYBACK_LOOP_PINGPONG, vmath.vector3(1,1.2,1), go.EASING_LINEAR, 0.5)
	go.animate(".", "rotation", go.PLAYBACK_LOOP_PINGPONG, vmath.quat(0, 0, 0.1, 0.2), go.EASING_LINEAR, 0.5)
end



local function dead_player(self)
	sound.play(sound_list[math.random(1, #sound_list)])
	go.cancel_animations(".", "position")
	msg.post("#collisionobject", "disable")
	go.animate(".", "scale", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(0,0,0), go.EASING_INOUTSINE, 0.5)
	go.animate(".", "rotation", go.PLAYBACK_ONCE_FORWARD, vmath.quat(0,0,1,1), go.EASING_INOUTSINE, 0.5)
	timer.delay(0.5, false, function()
		msg.post(".", "disable")
		change_state("dead")
	end)

end

function is_shield_player(self)
	is_shield = true
end

local function set_color(self)
	go.set("#sprite_cucumber", "tint", vmath.vector4(1,1,1,1)) 
end

local function player_hitted(self, damage)
	local rota = vmath.quat_rotation_z(0)
	is_shield = false
	local arm = damage * ARMOR / 100
	local dmg = damage - arm
	KOL_POGL_URON = KOL_POGL_URON + arm
	factory.create("#damage", nil, rota, {damage = dmg, player = true})
	change_hp(-dmg)
	if HP_PLAYER <= 0 then
		dead_player(self)
	end
	if dmg ~= 0 then
		particlefx.play("#blood")
		go.animate("#sprite_cucumber", "tint", go.PLAYBACK_LOOP_PINGPONG, vmath.vector4(1,0,1,1), go.EASING_INBOUNCE, 0.5, 0, set_color)
	end
	timer.delay(TIME_HITTED, false, function()
		go.cancel_animations("#sprite_cucumber", "tint")
		is_shield_player(self)
	end)
end	

function update(self, dt)
	if HP_PLAYER < MAX_HP_PLAYER then
		local prosent = HP_PLAYER * 100 / MAX_HP_PLAYER /100
		go.set("#sprite_cucumber", "tint", vmath.vector4(1,prosent,prosent,1))
	end
	if REGEN_PLAYER > 0 then
		if HP_PLAYER < MAX_HP_PLAYER then
			self.regen = self.regen - dt
			if self.regen < 0 then
				factory.create("#damage", nil, vmath.quat_rotation_z(0), { damage = REGEN_PLAYER/10, player = true, regen = true})
				change_hp(REGEN_PLAYER/10)
				self.regen = 1
			end
		end
	end
	local pos = go.get_position()
	if self.dir ~= vmath.vector3() then
		local new_pos = pos + dt * SPEED_PLAYER * self.dir
		go.set_position(new_pos)
	end
	self.dir = vmath.vector3()
	self.correction = vmath.vector3()
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.other_group == hash("stena") then
			local proj = vmath.dot(self.correction, message.normal)
			local comp = (message.distance - proj) * message.normal
			self.correction = self.correction + comp
			go.set_position(go.get_position() + comp)
		end
	elseif message_id == hash("hit_player") then
		if is_shield then
			local randomValue = math.random()
			if randomValue <= UKLON_PLAYER/100 then
				sound.play("#miss")
				player_hitted(self, 0)
			else
				sound.play("#hit_player")
				player_hitted(self, message.value)
			end
		end
	elseif message_id == hash("next_level") then
		sound.play("#next_level1")
		particlefx.play("#levelup")
		timer.delay(1, false, function() change_state("next") end)
		
	elseif message_id == hash("comeback") then
		factory.create("#boom", nil, nil, {player = true, boom = 500})
		sound.play("#next_level1")
		go.set("#sprite_cucumber", "tint", vmath.vector4(1,1,1,1))
		msg.post(".", "enable")
		go.set(".", "scale", vmath.vector3(0.85,1,1))
		go.set(".", "rotation", vmath.quat(0, 0, 0.1, -0.2))
		local spd = SPEED_SHOOT
		local spd2 = TIME_SHOOT_AK47
		SPEED_SHOOT = 0.1
		TIME_SHOOT_AK47 = 0.1
		timer.delay(BOOS_TIME, false, 
		function() 
			SPEED_SHOOT = spd 
			TIME_SHOOT_AK47 = spd2
		end)
	elseif message_id == hash("add_boom") then
		timer.delay(BOOM_TIME, true, function() 
			factory.create("#boom", nil, nil, {player = true, boom = BOOM_DAMAGE})
		end)
	elseif message_id == hash("move") then
		if message.value == "up" then
			self.dir.y = 1
		elseif message.value == "down" then
			self.dir.y = -1
		elseif message.value == "left" then
			self.dir.x = -1
			sprite.set_hflip("#sprite_cucumber", false)
		elseif message.value == "right" then
			self.dir.x = 1
			sprite.set_hflip("#sprite_cucumber", true)
		end

		if vmath.length(self.dir) > 0 then
			self.dir = vmath.normalize(self.dir)
		end
	end
end



function on_input(self, action_id, action)
	if action_id == hash("up") then
		self.dir.y = 1
	elseif action_id == hash("down") then
		self.dir.y = -1
	elseif action_id == hash("left") then
		self.dir.x = -1
		sprite.set_hflip("#sprite_cucumber", false)
	elseif action_id == hash("right") then
		self.dir.x = 1
		sprite.set_hflip("#sprite_cucumber", true)
	end

	if vmath.length(self.dir) > 0 then
		self.dir = vmath.normalize(self.dir)
	end
end
